// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int       @id @default(autoincrement())
  username               String    @unique
  email                  String    @unique
  password_hash          String
  password_salt          String
  password_last_changed  DateTime  @default(now())
  is_temp_password       Boolean   @default(false)
  last_successful_login  DateTime?
  failed_login_attempts  Int       @default(0)
  account_locked         Boolean   @default(false)
  piv_verified           Boolean   @default(false)
  role                   String
  created_at             DateTime  @default(now())
  sessions               Session[]
  password_history       PasswordHistory[]
  reset_requests         PasswordResetRequest[]
  audit_logs             AuditLog[]
  saved_reports          UserSavedReport[]
}

model PasswordHistory {
  id          Int      @id @default(autoincrement())
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  password_hash String
  password_salt String
  changed_at  DateTime @default(now())
}

model Config {
  id        Int     @id @default(autoincrement())
  name      String?
  logo      String?
  appType   Int?
  use_case  String?
  is_active Boolean @default(false)
}

model Session {
  id             String   @id
  user_id        Int
  user           User     @relation(fields: [user_id], references: [id])
  session_start  DateTime @default(now())
  last_activity  DateTime @default(now())
  terminated_at  DateTime?
  jwt_token      String?
  ip_address     String
  user_agent     String?
  valid          Boolean  @default(true)
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  user_id      Int?
  user         User?    @relation(fields: [user_id], references: [id])
  event_time   DateTime @default(now())
  event_type   String
  description  String?
  source_ip    String
  user_agent   String?
}

model PasswordResetRequest {
  id          Int      @id @default(autoincrement())
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  reset_token String   @unique
  created_at  DateTime @default(now())
  expires_at  DateTime
  used        Boolean  @default(false)
}

model BannedPassword {
  id         Int      @id @default(autoincrement())
  password   String
  source     String?
  created_at DateTime @default(now())
}

model Policy {
  id          Int      @id @default(autoincrement())
  company_name String
  source_url  String
  terms_text  String
  raw_response String?
  created_at  DateTime @default(now())
  audit_reports AuditReport[]
}

model AuditReport {
  id              Int      @id @default(autoincrement())
  policy_id       Int
  policy          Policy   @relation(fields: [policy_id], references: [id])
  total_score     Int
  letter_grade    String
  overall_summary String
  raw_audit_json  String?
  created_at      DateTime @default(now())
  section_scores  SectionScore[]
  saved_reports   UserSavedReport[]
}

model SectionScore {
  id          Int    @id @default(autoincrement())
  report_id   Int
  report      AuditReport @relation(fields: [report_id], references: [id])
  section_name String
  score       Int
  max_score   Int
  commentary  String
}

model UserSavedReport {
  id           Int    @id @default(autoincrement())
  user_id      Int
  user         User   @relation(fields: [user_id], references: [id])
  report_id    Int
  report       AuditReport @relation(fields: [report_id], references: [id])
  saved_at     DateTime @default(now())
  display_name String?
  notes        String?

  @@index([user_id])
  @@index([report_id])
}
