{
  "info": {
    "name": "PolicyGlass API Collection",
    "description": "Comprehensive API collection for the PolicyGlass application",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "policyId",
      "value": "1",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate a user with username/email and password"
          },
          "response": [
            {
              "name": "Login Successful",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"message\": \"Login successful\",\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"testuser\",\n    \"email\": \"testuser@example.com\",\n    \"role\": \"user\"\n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('role');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"securepassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user with username, email, and password"
          },
          "response": [
            {
              "name": "Registration Successful",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"securepassword123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "register"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"message\": \"Registration successful\",\n  \"user\": {\n    \"id\": 2,\n    \"username\": \"newuser\",\n    \"email\": \"newuser@example.com\",\n    \"role\": \"user\"\n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Registration successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('successful');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "User Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout the current user and invalidate their session"
          },
          "response": [
            {
              "name": "Logout Successful",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/auth/logout",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "logout"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"message\": \"Logout successful\"\n}"
            }
          ]
        },
        {
          "name": "Verify User Session",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify"]
            },
            "description": "Verify if the current user has a valid session"
          },
          "response": [
            {
              "name": "Verification Successful",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/auth/verify",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "verify"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"message\": \"Email verification successful\"\n}"
            }
          ]
        },
        {
          "name": "Request Password Reset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/password-reset/request",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "password-reset", "request"]
            },
            "description": "Request a password reset token for a user account"
          },
          "response": [
            {
              "name": "Reset Request Processed",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"user@example.com\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/password-reset/request",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "password-reset", "request"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"message\": \"Password reset request processed\"\n}"
            }
          ]
        },
        {
          "name": "Confirm Password Reset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-here\",\n  \"new_password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/password-reset/confirm",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "password-reset", "confirm"]
            },
            "description": "Confirm password reset using a reset token and new password"
          },
          "response": [
            {
              "name": "Password Reset Confirmed",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"token\": \"reset-token-here\",\n  \"new_password\": \"newpassword123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/password-reset/confirm",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "password-reset", "confirm"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"message\": \"Password reset confirmed successfully\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Admin",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            },
            "description": "Retrieve a list of all users (admin only)"
          },
          "response": [
            {
              "name": "Users Retrieved Successfully",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/admin/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "users"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"username\": \"admin\",\n      \"email\": \"admin@example.com\",\n      \"role\": \"admin\"\n    },\n    {\n      \"id\": 2,\n      \"username\": \"user1\",\n      \"email\": \"user1@example.com\",\n      \"role\": \"user\"\n    }\n  ]\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains users array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('users');",
                  "    pm.expect(jsonData.users).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update User Role",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            },
            "description": "Update a user's role (admin only)"
          },
          "response": [
            {
              "name": "User Role Updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userId\": 2,\n  \"role\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "users"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"message\": \"User role updated successfully\",\n  \"user\": {\n    \"id\": 2,\n    \"username\": \"user1\",\n    \"email\": \"user1@example.com\",\n    \"role\": \"admin\"\n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User role updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Policy Research",
      "item": [
        {
          "name": "Research Policy Terms",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"url\": \"https://example.com/privacy-policy\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/policy/research",
              "host": ["{{baseUrl}}"],
              "path": ["policy", "research"]
            },
            "description": "Research and store policy terms for a given website URL using AI analysis"
          },
          "response": [
            {
              "name": "Policy Research Completed",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"url\": \"https://example.com/privacy-policy\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/policy/research",
                  "host": ["{{baseUrl}}"],
                  "path": ["policy", "research"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"policyId\": 1,\n  \"message\": \"Policy research completed and stored successfully\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Policy research completed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('policyId');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('completed');",
                  "    ",
                  "    // Store policy ID for future requests",
                  "    pm.collectionVariables.set('policyId', jsonData.policyId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Policy by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/policy/{{policyId}}",
              "host": ["{{baseUrl}}"],
              "path": ["policy", "{{policyId}}"]
            },
            "description": "Retrieve a specific policy by ID with audit reports and section scores"
          },
          "response": [
            {
              "name": "Policy Retrieved Successfully",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/policy/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["policy", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"id\": 1,\n  \"url\": \"https://example.com/privacy-policy\",\n  \"title\": \"Example Privacy Policy\",\n  \"content\": \"Policy content here...\",\n  \"created_at\": \"2025-08-03T10:00:00.000Z\",\n  \"updated_at\": \"2025-08-03T10:00:00.000Z\",\n  \"audit_reports\": [\n    {\n      \"id\": 1,\n      \"policy_id\": 1,\n      \"overall_score\": 85,\n      \"summary\": \"Good privacy policy with minor issues\",\n      \"recommendations\": \"Consider adding more specific data retention periods\",\n      \"created_at\": \"2025-08-03T10:00:00.000Z\",\n      \"section_scores\": [\n        {\n          \"id\": 1,\n          \"audit_report_id\": 1,\n          \"section_name\": \"Data Collection\",\n          \"score\": 90,\n          \"comments\": \"Clear description of data collection practices\"\n        },\n        {\n          \"id\": 2,\n          \"audit_report_id\": 1,\n          \"section_name\": \"Data Sharing\",\n          \"score\": 80,\n          \"comments\": \"Could be more specific about third-party sharing\"\n        }\n      ]\n    }\n  ]\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Policy data is complete\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('url');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('audit_reports');",
                  "    pm.expect(jsonData.audit_reports).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "API Documentation",
      "item": [
        {
          "name": "Get OpenAPI Specification",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/docs",
              "host": ["{{baseUrl}}"],
              "path": ["docs"]
            },
            "description": "Retrieve the complete OpenAPI specification for the PolicyGlass API"
          },
          "response": [
            {
              "name": "OpenAPI Spec Retrieved",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/docs",
                  "host": ["{{baseUrl}}"],
                  "path": ["docs"]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [],
              "body": "{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"PolicyGlass API Documentation\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Comprehensive API documentation for the PolicyGlass application\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:3000/api\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/auth/login\": {\n      \"post\": {\n        \"operationId\": \"loginUser\",\n        \"summary\": \"User login\",\n        \"description\": \"Authenticate a user with username/email and password\",\n        \"tags\": [\"Authentication\"]\n      }\n    }\n  }\n}"
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.collectionVariables.get('baseUrl')) {",
          "    pm.collectionVariables.set('baseUrl', 'http://localhost:3000/api');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response time",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Global test to check content type for JSON responses",
          "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    pm.test('Response is valid JSON', function () {",
          "        pm.response.to.be.json;",
          "    });",
          "}"
        ]
      }
    }
  ]
}
